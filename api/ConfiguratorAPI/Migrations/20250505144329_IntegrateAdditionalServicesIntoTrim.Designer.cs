// <auto-generated />
using System.Collections.Generic;
using ConfiguratorAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ConfiguratorAPI.Migrations
{
    [DbContext(typeof(ConfiguratorDbContext))]
    [Migration("20250505144329_IntegrateAdditionalServicesIntoTrim")]
    partial class IntegrateAdditionalServicesIntoTrim
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ConfiguratorAPI.Models.Brand", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("logo");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("brands", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "alfaromeo",
                            IsActive = true,
                            Logo = "/brands/alfaromeo.webp",
                            Name = "Alfa Romeo"
                        },
                        new
                        {
                            Id = "audi",
                            IsActive = true,
                            Logo = "/brands/audi.webp",
                            Name = "Audi"
                        },
                        new
                        {
                            Id = "bmw",
                            IsActive = true,
                            Logo = "/brands/bmw.webp",
                            Name = "BMW"
                        },
                        new
                        {
                            Id = "byd",
                            IsActive = true,
                            Logo = "/brands/byd.webp",
                            Name = "BYD"
                        },
                        new
                        {
                            Id = "chery",
                            IsActive = true,
                            Logo = "/brands/chery.webp",
                            Name = "Chery"
                        },
                        new
                        {
                            Id = "chevrolet",
                            IsActive = true,
                            Logo = "/brands/chevrolet.webp",
                            Name = "Chevrolet"
                        },
                        new
                        {
                            Id = "citroen",
                            IsActive = true,
                            Logo = "/brands/citroen.webp",
                            Name = "Citroen"
                        },
                        new
                        {
                            Id = "cupra",
                            IsActive = true,
                            Logo = "/brands/cupra.webp",
                            Name = "Cupra"
                        },
                        new
                        {
                            Id = "dacia",
                            IsActive = true,
                            Logo = "/brands/dacia.webp",
                            Name = "Dacia"
                        },
                        new
                        {
                            Id = "fiat",
                            IsActive = true,
                            Logo = "/brands/fiat.webp",
                            Name = "FIAT"
                        },
                        new
                        {
                            Id = "ford",
                            IsActive = true,
                            Logo = "/brands/ford.webp",
                            Name = "Ford"
                        },
                        new
                        {
                            Id = "haval",
                            IsActive = true,
                            Logo = "/brands/haval.webp",
                            Name = "Haval"
                        },
                        new
                        {
                            Id = "honda",
                            IsActive = true,
                            Logo = "/brands/honda.webp",
                            Name = "Honda"
                        },
                        new
                        {
                            Id = "hyundai",
                            IsActive = true,
                            Logo = "/brands/hyundai.webp",
                            Name = "Hyundai"
                        },
                        new
                        {
                            Id = "jaguar",
                            IsActive = true,
                            Logo = "/brands/jaguar.webp",
                            Name = "Jaguar"
                        },
                        new
                        {
                            Id = "jeep",
                            IsActive = true,
                            Logo = "/brands/jeep.webp",
                            Name = "Jeep"
                        },
                        new
                        {
                            Id = "kia",
                            IsActive = true,
                            Logo = "/brands/kia.webp",
                            Name = "Kia"
                        },
                        new
                        {
                            Id = "landrover",
                            IsActive = true,
                            Logo = "/brands/landrover.webp",
                            Name = "Land Rover"
                        },
                        new
                        {
                            Id = "mahindra",
                            IsActive = true,
                            Logo = "/brands/mahindra.webp",
                            Name = "Mahindra"
                        },
                        new
                        {
                            Id = "mercedes",
                            IsActive = true,
                            Logo = "/brands/mercedes.webp",
                            Name = "Mercedes"
                        },
                        new
                        {
                            Id = "mg",
                            IsActive = true,
                            Logo = "/brands/mg.webp",
                            Name = "MG"
                        },
                        new
                        {
                            Id = "mini",
                            IsActive = true,
                            Logo = "/brands/mini.webp",
                            Name = "Mini"
                        },
                        new
                        {
                            Id = "mitsubishi",
                            IsActive = true,
                            Logo = "/brands/mitsubishi.webp",
                            Name = "Mitsubishi"
                        },
                        new
                        {
                            Id = "nissan",
                            IsActive = true,
                            Logo = "/brands/nissan.webp",
                            Name = "Nissan"
                        },
                        new
                        {
                            Id = "opel",
                            IsActive = true,
                            Logo = "/brands/opel.webp",
                            Name = "Opel"
                        },
                        new
                        {
                            Id = "peugeot",
                            IsActive = true,
                            Logo = "/brands/peugeot.webp",
                            Name = "Peugeot"
                        },
                        new
                        {
                            Id = "porsche",
                            IsActive = true,
                            Logo = "/brands/porsche.webp",
                            Name = "Porsche"
                        },
                        new
                        {
                            Id = "renault",
                            IsActive = true,
                            Logo = "/brands/renault.webp",
                            Name = "Renault"
                        },
                        new
                        {
                            Id = "seat",
                            IsActive = true,
                            Logo = "/brands/seat.webp",
                            Name = "SEAT"
                        },
                        new
                        {
                            Id = "skoda",
                            IsActive = true,
                            Logo = "/brands/skoda.webp",
                            Name = "Skoda"
                        },
                        new
                        {
                            Id = "kgm",
                            IsActive = true,
                            Logo = "/brands/kgm.webp",
                            Name = "KGM"
                        },
                        new
                        {
                            Id = "suzuki",
                            IsActive = true,
                            Logo = "/brands/suzuki.webp",
                            Name = "Suzuki"
                        },
                        new
                        {
                            Id = "toyota",
                            IsActive = true,
                            Logo = "/brands/toyota.webp",
                            Name = "Toyota"
                        },
                        new
                        {
                            Id = "volkswagen",
                            IsActive = true,
                            Logo = "/brands/volkswagen.webp",
                            Name = "Volkswagen"
                        },
                        new
                        {
                            Id = "volvo",
                            IsActive = true,
                            Logo = "/brands/volvo.webp",
                            Name = "Volvo"
                        },
                        new
                        {
                            Id = "wallys",
                            IsActive = true,
                            Logo = "/brands/wallys.webp",
                            Name = "Wallys"
                        });
                });

            modelBuilder.Entity("ConfiguratorAPI.Models.FeatureGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("TrimId")
                        .HasColumnType("text")
                        .HasColumnName("trim_id");

                    b.Property<string>("ModelId")
                        .HasColumnType("text")
                        .HasColumnName("model_id");

                    b.Property<string>("BrandId")
                        .HasColumnType("text")
                        .HasColumnName("brand_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id", "TrimId", "ModelId", "BrandId");

                    b.HasIndex("TrimId", "ModelId", "BrandId");

                    b.ToTable("feature_groups", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TrimId = "2.0-turbo-super-bva",
                            ModelId = "giulia",
                            BrandId = "alfaromeo",
                            Name = "Caractéristiques"
                        },
                        new
                        {
                            Id = 2,
                            TrimId = "2.0-turbo-super-bva",
                            ModelId = "giulia",
                            BrandId = "alfaromeo",
                            Name = "Transmission"
                        },
                        new
                        {
                            Id = 3,
                            TrimId = "2.0-turbo-super-bva",
                            ModelId = "giulia",
                            BrandId = "alfaromeo",
                            Name = "Performances"
                        },
                        new
                        {
                            Id = 4,
                            TrimId = "35-tfsi-business-extended",
                            ModelId = "a3-berline",
                            BrandId = "audi",
                            Name = "Caractéristiques"
                        },
                        new
                        {
                            Id = 5,
                            TrimId = "35-tfsi-business-extended",
                            ModelId = "a3-berline",
                            BrandId = "audi",
                            Name = "Transmission"
                        },
                        new
                        {
                            Id = 6,
                            TrimId = "35-tfsi-business-extended",
                            ModelId = "a3-berline",
                            BrandId = "audi",
                            Name = "Performances"
                        });
                });

            modelBuilder.Entity("ConfiguratorAPI.Models.Model", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("BrandId")
                        .HasColumnType("text")
                        .HasColumnName("brand_id");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id", "BrandId");

                    b.HasIndex("BrandId");

                    b.ToTable("models", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "giulia",
                            BrandId = "alfaromeo",
                            Image = "/models/alfaromeo/giulia.webp",
                            IsActive = true,
                            Name = "Giulia"
                        },
                        new
                        {
                            Id = "stelvio",
                            BrandId = "alfaromeo",
                            Image = "/models/alfaromeo/stelvio.webp",
                            IsActive = true,
                            Name = "Stelvio"
                        },
                        new
                        {
                            Id = "a3-berline",
                            BrandId = "audi",
                            Image = "/models/audi/a3-berline.webp",
                            IsActive = true,
                            Name = "A3 Berline"
                        },
                        new
                        {
                            Id = "q2",
                            BrandId = "audi",
                            Image = "/models/audi/q2.webp",
                            IsActive = true,
                            Name = "Q2"
                        },
                        new
                        {
                            Id = "q3",
                            BrandId = "audi",
                            Image = "/models/audi/q3.webp",
                            IsActive = true,
                            Name = "Q3"
                        },
                        new
                        {
                            Id = "q3-sportback",
                            BrandId = "audi",
                            Image = "/models/audi/q3-sportback.webp",
                            IsActive = true,
                            Name = "Q3 Sportback"
                        },
                        new
                        {
                            Id = "q8-e-tron",
                            BrandId = "audi",
                            Image = "/models/audi/q8-e-tron.webp",
                            IsActive = true,
                            Name = "Q8 e-tron"
                        },
                        new
                        {
                            Id = "q8-sportback-e-tron",
                            BrandId = "audi",
                            Image = "/models/audi/q8-sportback-e-tron.webp",
                            IsActive = true,
                            Name = "Q8 Sportback e-tron"
                        },
                        new
                        {
                            Id = "e-tron-gt",
                            BrandId = "audi",
                            Image = "/models/audi/e-tron-gt.webp",
                            IsActive = true,
                            Name = "e-tron GT"
                        },
                        new
                        {
                            Id = "q7",
                            BrandId = "audi",
                            Image = "/models/audi/q7.webp",
                            IsActive = true,
                            Name = "Q7"
                        },
                        new
                        {
                            Id = "q8",
                            BrandId = "audi",
                            Image = "/models/audi/q8.webp",
                            IsActive = true,
                            Name = "Q8"
                        },
                        new
                        {
                            Id = "3-series",
                            BrandId = "bmw",
                            Image = "/models/bmw/3-series.webp",
                            IsActive = true,
                            Name = "3 Series"
                        },
                        new
                        {
                            Id = "5-series",
                            BrandId = "bmw",
                            Image = "/models/bmw/5-series.webp",
                            IsActive = true,
                            Name = "5 Series"
                        },
                        new
                        {
                            Id = "x3",
                            BrandId = "bmw",
                            Image = "/models/bmw/x3.webp",
                            IsActive = true,
                            Name = "X3"
                        },
                        new
                        {
                            Id = "x5",
                            BrandId = "bmw",
                            Image = "/models/bmw/x5.webp",
                            IsActive = true,
                            Name = "X5"
                        },
                        new
                        {
                            Id = "a-class",
                            BrandId = "mercedes",
                            Image = "/models/mercedes/a-class.webp",
                            IsActive = true,
                            Name = "A-Class"
                        },
                        new
                        {
                            Id = "c-class",
                            BrandId = "mercedes",
                            Image = "/models/mercedes/c-class.webp",
                            IsActive = true,
                            Name = "C-Class"
                        },
                        new
                        {
                            Id = "e-class",
                            BrandId = "mercedes",
                            Image = "/models/mercedes/e-class.webp",
                            IsActive = true,
                            Name = "E-Class"
                        },
                        new
                        {
                            Id = "glc",
                            BrandId = "mercedes",
                            Image = "/models/mercedes/glc.webp",
                            IsActive = true,
                            Name = "GLC"
                        });
                });

            modelBuilder.Entity("ConfiguratorAPI.Models.PriceMatrix", b =>
                {
                    b.Property<string>("TrimId")
                        .HasColumnType("text")
                        .HasColumnName("trim_id");

                    b.Property<string>("ModelId")
                        .HasColumnType("text")
                        .HasColumnName("model_id");

                    b.Property<string>("BrandId")
                        .HasColumnType("text")
                        .HasColumnName("brand_id");

                    b.HasKey("TrimId", "ModelId", "BrandId");

                    b.ToTable("price_matrices", (string)null);
                });

            modelBuilder.Entity("ConfiguratorAPI.Models.PricePoint", b =>
                {
                    b.Property<string>("TrimId")
                        .HasColumnType("text")
                        .HasColumnName("trim_id");

                    b.Property<string>("ModelId")
                        .HasColumnType("text")
                        .HasColumnName("model_id");

                    b.Property<string>("BrandId")
                        .HasColumnType("text")
                        .HasColumnName("brand_id");

                    b.Property<int>("Duration")
                        .HasColumnType("integer")
                        .HasColumnName("duration");

                    b.Property<int>("Kilometers")
                        .HasColumnType("integer")
                        .HasColumnName("kilometers");

                    b.HasKey("TrimId", "ModelId", "BrandId", "Duration", "Kilometers");

                    b.ToTable("price_points", (string)null);
                });

            modelBuilder.Entity("ConfiguratorAPI.Models.Trim", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ModelId")
                        .HasColumnType("text")
                        .HasColumnName("model_id");

                    b.Property<string>("BrandId")
                        .HasColumnType("text")
                        .HasColumnName("brand_id");

                    b.Property<List<string>>("Features")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("features");

                    b.Property<bool>("FullInsurance0PercentDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("full_insurance_0_percent_default");

                    b.Property<decimal>("FullInsurance0PercentPrice")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("full_insurance_0_percent_price");

                    b.Property<bool>("FullInsurance0PercentRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("full_insurance_0_percent_required");

                    b.Property<bool>("FullInsurance4PercentDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("full_insurance_4_percent_default");

                    b.Property<decimal>("FullInsurance4PercentPrice")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("full_insurance_4_percent_price");

                    b.Property<bool>("FullInsurance4PercentRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("full_insurance_4_percent_required");

                    b.Property<bool>("GeolocalisationDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("geolocalisation_default");

                    b.Property<decimal>("GeolocalisationPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(19.90m)
                        .HasColumnName("geolocalisation_price");

                    b.Property<bool>("GeolocalisationRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("geolocalisation_required");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<decimal>("ListPrice")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("list_price");

                    b.Property<bool>("MaintenancePackageDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("maintenance_package_default");

                    b.Property<decimal>("MaintenancePackagePrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(49.99m)
                        .HasColumnName("maintenance_package_price");

                    b.Property<bool>("MaintenancePackageRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("maintenance_package_required");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("price");

                    b.Property<bool>("PurchaseOptionDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("purchase_option_default");

                    b.Property<decimal>("PurchaseOptionPrice")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("purchase_option_price");

                    b.Property<bool>("PurchaseOptionRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("purchase_option_required");

                    b.Property<bool>("RoadAssistanceDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("road_assistance_default");

                    b.Property<decimal>("RoadAssistancePrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(15.99m)
                        .HasColumnName("road_assistance_price");

                    b.Property<bool>("RoadAssistanceRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("road_assistance_required");

                    b.Property<bool>("VignettesDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("vignettes_default");

                    b.Property<decimal>("VignettesPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(29.99m)
                        .HasColumnName("vignettes_price");

                    b.Property<bool>("VignettesRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("vignettes_required");

                    b.HasKey("Id", "ModelId", "BrandId");

                    b.HasIndex("ModelId", "BrandId");

                    b.ToTable("trims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2.0-turbo-super-bva",
                            ModelId = "giulia",
                            BrandId = "alfaromeo",
                            Features = new List<string> { "2.0L Turbo Engine", "8-Speed Automatic Transmission", "Rear-Wheel Drive", "Leather Interior", "Dual-Zone Climate Control", "Infotainment System with Navigation", "Parking Sensors", "Cruise Control" },
                            FullInsurance0PercentDefault = true,
                            FullInsurance0PercentPrice = 35.92m,
                            FullInsurance0PercentRequired = false,
                            FullInsurance4PercentDefault = false,
                            FullInsurance4PercentPrice = 26.94m,
                            FullInsurance4PercentRequired = false,
                            GeolocalisationDefault = false,
                            GeolocalisationPrice = 19.90m,
                            GeolocalisationRequired = false,
                            IsActive = true,
                            ListPrice = 198000m,
                            MaintenancePackageDefault = true,
                            MaintenancePackagePrice = 49.99m,
                            MaintenancePackageRequired = false,
                            Name = "2.0 Turbo Super BVA",
                            Price = 449m,
                            PurchaseOptionDefault = false,
                            PurchaseOptionPrice = 79200.00m,
                            PurchaseOptionRequired = false,
                            RoadAssistanceDefault = true,
                            RoadAssistancePrice = 15.99m,
                            RoadAssistanceRequired = false,
                            VignettesDefault = false,
                            VignettesPrice = 29.99m,
                            VignettesRequired = false
                        },
                        new
                        {
                            Id = "35-tfsi-business-extended",
                            ModelId = "a3-berline",
                            BrandId = "audi",
                            Features = new List<string> { "1.5L TFSI Engine", "150 ch", "Manual 6-Speed Transmission", "Front-Wheel Drive", "MMI Navigation System", "Audi Virtual Cockpit", "Dual-Zone Climate Control", "Parking Sensors" },
                            FullInsurance0PercentDefault = true,
                            FullInsurance0PercentPrice = 27.92m,
                            FullInsurance0PercentRequired = false,
                            FullInsurance4PercentDefault = false,
                            FullInsurance4PercentPrice = 20.94m,
                            FullInsurance4PercentRequired = false,
                            GeolocalisationDefault = false,
                            GeolocalisationPrice = 19.90m,
                            GeolocalisationRequired = false,
                            IsActive = true,
                            ListPrice = 145000m,
                            MaintenancePackageDefault = true,
                            MaintenancePackagePrice = 49.99m,
                            MaintenancePackageRequired = false,
                            Name = "35 TFSI Business Extended",
                            Price = 349m,
                            PurchaseOptionDefault = false,
                            PurchaseOptionPrice = 58000.00m,
                            PurchaseOptionRequired = false,
                            RoadAssistanceDefault = true,
                            RoadAssistancePrice = 15.99m,
                            RoadAssistanceRequired = false,
                            VignettesDefault = false,
                            VignettesPrice = 29.99m,
                            VignettesRequired = false
                        },
                        new
                        {
                            Id = "35-tfsi-s-line-bva",
                            ModelId = "q2",
                            BrandId = "audi",
                            Features = new List<string> { "1.5L TFSI Engine", "150 ch", "Automatic 7-Speed Transmission", "Front-Wheel Drive", "S Line Package", "MMI Navigation System", "Audi Virtual Cockpit", "LED Headlights" },
                            FullInsurance0PercentDefault = true,
                            FullInsurance0PercentPrice = 31.92m,
                            FullInsurance0PercentRequired = false,
                            FullInsurance4PercentDefault = false,
                            FullInsurance4PercentPrice = 23.94m,
                            FullInsurance4PercentRequired = false,
                            GeolocalisationDefault = false,
                            GeolocalisationPrice = 19.90m,
                            GeolocalisationRequired = false,
                            IsActive = true,
                            ListPrice = 155000m,
                            MaintenancePackageDefault = true,
                            MaintenancePackagePrice = 49.99m,
                            MaintenancePackageRequired = false,
                            Name = "35 TFSI S Line BVA",
                            Price = 399m,
                            PurchaseOptionDefault = false,
                            PurchaseOptionPrice = 62000.00m,
                            PurchaseOptionRequired = false,
                            RoadAssistanceDefault = true,
                            RoadAssistancePrice = 15.99m,
                            RoadAssistanceRequired = false,
                            VignettesDefault = false,
                            VignettesPrice = 29.99m,
                            VignettesRequired = false
                        });
                });

            modelBuilder.Entity("ConfiguratorAPI.Models.TrimFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FeatureGroupId")
                        .HasColumnType("integer")
                        .HasColumnName("feature_group_id");

                    b.Property<string>("TrimId")
                        .HasColumnType("text")
                        .HasColumnName("trim_id");

                    b.Property<string>("ModelId")
                        .HasColumnType("text")
                        .HasColumnName("model_id");

                    b.Property<string>("BrandId")
                        .HasColumnType("text")
                        .HasColumnName("brand_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id", "FeatureGroupId", "TrimId", "ModelId", "BrandId");

                    b.HasIndex("FeatureGroupId", "TrimId", "ModelId", "BrandId");

                    b.ToTable("trim_features", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FeatureGroupId = 1,
                            TrimId = "2.0-turbo-super-bva",
                            ModelId = "giulia",
                            BrandId = "alfaromeo",
                            Name = "Moteur",
                            Value = "2.0L Turbo"
                        },
                        new
                        {
                            Id = 2,
                            FeatureGroupId = 1,
                            TrimId = "2.0-turbo-super-bva",
                            ModelId = "giulia",
                            BrandId = "alfaromeo",
                            Name = "Puissance",
                            Value = "200 ch"
                        },
                        new
                        {
                            Id = 3,
                            FeatureGroupId = 1,
                            TrimId = "2.0-turbo-super-bva",
                            ModelId = "giulia",
                            BrandId = "alfaromeo",
                            Name = "Couple",
                            Value = "330 Nm"
                        },
                        new
                        {
                            Id = 4,
                            FeatureGroupId = 1,
                            TrimId = "2.0-turbo-super-bva",
                            ModelId = "giulia",
                            BrandId = "alfaromeo",
                            Name = "Cylindrée",
                            Value = "1995 cc"
                        },
                        new
                        {
                            Id = 5,
                            FeatureGroupId = 2,
                            TrimId = "2.0-turbo-super-bva",
                            ModelId = "giulia",
                            BrandId = "alfaromeo",
                            Name = "Boîte de vitesses",
                            Value = "Automatique 8 rapports"
                        },
                        new
                        {
                            Id = 6,
                            FeatureGroupId = 2,
                            TrimId = "2.0-turbo-super-bva",
                            ModelId = "giulia",
                            BrandId = "alfaromeo",
                            Name = "Transmission",
                            Value = "Propulsion arrière"
                        },
                        new
                        {
                            Id = 7,
                            FeatureGroupId = 3,
                            TrimId = "2.0-turbo-super-bva",
                            ModelId = "giulia",
                            BrandId = "alfaromeo",
                            Name = "Vitesse maximale",
                            Value = "235 km/h"
                        },
                        new
                        {
                            Id = 8,
                            FeatureGroupId = 3,
                            TrimId = "2.0-turbo-super-bva",
                            ModelId = "giulia",
                            BrandId = "alfaromeo",
                            Name = "0-100 km/h",
                            Value = "6.6 secondes"
                        },
                        new
                        {
                            Id = 9,
                            FeatureGroupId = 4,
                            TrimId = "35-tfsi-business-extended",
                            ModelId = "a3-berline",
                            BrandId = "audi",
                            Name = "Moteur",
                            Value = "1.5L TFSI"
                        },
                        new
                        {
                            Id = 10,
                            FeatureGroupId = 4,
                            TrimId = "35-tfsi-business-extended",
                            ModelId = "a3-berline",
                            BrandId = "audi",
                            Name = "Puissance",
                            Value = "150 ch"
                        },
                        new
                        {
                            Id = 11,
                            FeatureGroupId = 4,
                            TrimId = "35-tfsi-business-extended",
                            ModelId = "a3-berline",
                            BrandId = "audi",
                            Name = "Couple",
                            Value = "250 Nm"
                        },
                        new
                        {
                            Id = 12,
                            FeatureGroupId = 4,
                            TrimId = "35-tfsi-business-extended",
                            ModelId = "a3-berline",
                            BrandId = "audi",
                            Name = "Cylindrée",
                            Value = "1498 cc"
                        },
                        new
                        {
                            Id = 13,
                            FeatureGroupId = 5,
                            TrimId = "35-tfsi-business-extended",
                            ModelId = "a3-berline",
                            BrandId = "audi",
                            Name = "Boîte de vitesses",
                            Value = "Manuelle 6 rapports"
                        },
                        new
                        {
                            Id = 14,
                            FeatureGroupId = 5,
                            TrimId = "35-tfsi-business-extended",
                            ModelId = "a3-berline",
                            BrandId = "audi",
                            Name = "Transmission",
                            Value = "Traction avant"
                        },
                        new
                        {
                            Id = 15,
                            FeatureGroupId = 6,
                            TrimId = "35-tfsi-business-extended",
                            ModelId = "a3-berline",
                            BrandId = "audi",
                            Name = "Vitesse maximale",
                            Value = "224 km/h"
                        },
                        new
                        {
                            Id = 16,
                            FeatureGroupId = 6,
                            TrimId = "35-tfsi-business-extended",
                            ModelId = "a3-berline",
                            BrandId = "audi",
                            Name = "0-100 km/h",
                            Value = "8.2 secondes"
                        });
                });

            modelBuilder.Entity("ConfiguratorAPI.Models.FeatureGroup", b =>
                {
                    b.HasOne("ConfiguratorAPI.Models.Trim", null)
                        .WithMany()
                        .HasForeignKey("TrimId", "ModelId", "BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConfiguratorAPI.Models.Model", b =>
                {
                    b.HasOne("ConfiguratorAPI.Models.Brand", null)
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConfiguratorAPI.Models.PriceMatrix", b =>
                {
                    b.HasOne("ConfiguratorAPI.Models.Trim", null)
                        .WithOne()
                        .HasForeignKey("ConfiguratorAPI.Models.PriceMatrix", "TrimId", "ModelId", "BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConfiguratorAPI.Models.PricePoint", b =>
                {
                    b.HasOne("ConfiguratorAPI.Models.PriceMatrix", null)
                        .WithMany("Points")
                        .HasForeignKey("TrimId", "ModelId", "BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("ConfiguratorAPI.Models.AdvancePaymentPrices", "Prices", b1 =>
                        {
                            b1.Property<string>("PricePointTrimId")
                                .HasColumnType("text");

                            b1.Property<string>("PricePointModelId")
                                .HasColumnType("text");

                            b1.Property<string>("PricePointBrandId")
                                .HasColumnType("text");

                            b1.Property<int>("PricePointDuration")
                                .HasColumnType("integer");

                            b1.Property<int>("PricePointKilometers")
                                .HasColumnType("integer");

                            b1.Property<decimal>("Advance0")
                                .HasColumnType("decimal(10,2)")
                                .HasColumnName("advance_0");

                            b1.Property<decimal>("Advance10")
                                .HasColumnType("decimal(10,2)")
                                .HasColumnName("advance_10");

                            b1.Property<decimal>("Advance20")
                                .HasColumnType("decimal(10,2)")
                                .HasColumnName("advance_20");

                            b1.Property<decimal>("Advance30")
                                .HasColumnType("decimal(10,2)")
                                .HasColumnName("advance_30");

                            b1.HasKey("PricePointTrimId", "PricePointModelId", "PricePointBrandId", "PricePointDuration", "PricePointKilometers");

                            b1.ToTable("price_points");

                            b1.WithOwner()
                                .HasForeignKey("PricePointTrimId", "PricePointModelId", "PricePointBrandId", "PricePointDuration", "PricePointKilometers");
                        });

                    b.Navigation("Prices")
                        .IsRequired();
                });

            modelBuilder.Entity("ConfiguratorAPI.Models.Trim", b =>
                {
                    b.HasOne("ConfiguratorAPI.Models.Model", null)
                        .WithMany()
                        .HasForeignKey("ModelId", "BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConfiguratorAPI.Models.TrimFeature", b =>
                {
                    b.HasOne("ConfiguratorAPI.Models.FeatureGroup", null)
                        .WithMany("Features")
                        .HasForeignKey("FeatureGroupId", "TrimId", "ModelId", "BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConfiguratorAPI.Models.FeatureGroup", b =>
                {
                    b.Navigation("Features");
                });

            modelBuilder.Entity("ConfiguratorAPI.Models.PriceMatrix", b =>
                {
                    b.Navigation("Points");
                });
#pragma warning restore 612, 618
        }
    }
}
