// <auto-generated />
using System.Collections.Generic;
using ConfiguratorAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ConfiguratorAPI.Migrations
{
    [DbContext(typeof(ConfiguratorDbContext))]
    [Migration("20250505114145_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ConfiguratorAPI.Models.AdditionalService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("TrimId")
                        .HasColumnType("text")
                        .HasColumnName("trim_id");

                    b.Property<string>("ModelId")
                        .HasColumnType("text")
                        .HasColumnName("model_id");

                    b.Property<string>("BrandId")
                        .HasColumnType("text")
                        .HasColumnName("brand_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_default");

                    b.Property<bool>("IsPercentage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_percentage");

                    b.Property<bool>("IsRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_required");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("price");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id", "TrimId", "ModelId", "BrandId");

                    b.HasIndex("TrimId", "ModelId", "BrandId");

                    b.ToTable("additional_services", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TrimId = "2.0-turbo-super-bva",
                            ModelId = "giulia",
                            BrandId = "alfaromeo",
                            Description = "Complete insurance coverage with 0% deductible",
                            IsDefault = true,
                            IsPercentage = true,
                            IsRequired = false,
                            Name = "Full Insurance 0%",
                            Price = 35.92m,
                            Type = "FullInsurance0Percent"
                        },
                        new
                        {
                            Id = 2,
                            TrimId = "2.0-turbo-super-bva",
                            ModelId = "giulia",
                            BrandId = "alfaromeo",
                            Description = "Complete insurance coverage with 4% deductible",
                            IsDefault = false,
                            IsPercentage = true,
                            IsRequired = false,
                            Name = "Full Insurance 4%",
                            Price = 26.94m,
                            Type = "FullInsurance4Percent"
                        },
                        new
                        {
                            Id = 3,
                            TrimId = "2.0-turbo-super-bva",
                            ModelId = "giulia",
                            BrandId = "alfaromeo",
                            Description = "24/7 roadside assistance service",
                            IsDefault = true,
                            IsPercentage = false,
                            IsRequired = false,
                            Name = "Road Assistance",
                            Price = 15.99m,
                            Type = "RoadAssistance"
                        },
                        new
                        {
                            Id = 4,
                            TrimId = "2.0-turbo-super-bva",
                            ModelId = "giulia",
                            BrandId = "alfaromeo",
                            Description = "Regular maintenance service including oil changes and inspections",
                            IsDefault = true,
                            IsPercentage = false,
                            IsRequired = false,
                            Name = "Maintenance Package",
                            Price = 49.99m,
                            Type = "MaintenancePackage"
                        },
                        new
                        {
                            Id = 5,
                            TrimId = "2.0-turbo-super-bva",
                            ModelId = "giulia",
                            BrandId = "alfaromeo",
                            Description = "Road tax vignettes for European countries",
                            IsDefault = false,
                            IsPercentage = false,
                            IsRequired = false,
                            Name = "Vignettes",
                            Price = 29.99m,
                            Type = "Vignettes"
                        },
                        new
                        {
                            Id = 6,
                            TrimId = "2.0-turbo-super-bva",
                            ModelId = "giulia",
                            BrandId = "alfaromeo",
                            Description = "GPS tracking system for your vehicle",
                            IsDefault = false,
                            IsPercentage = false,
                            IsRequired = false,
                            Name = "Geolocalisation",
                            Price = 19.90m,
                            Type = "Geolocalisation"
                        },
                        new
                        {
                            Id = 7,
                            TrimId = "2.0-turbo-super-bva",
                            ModelId = "giulia",
                            BrandId = "alfaromeo",
                            Description = "Option to purchase the vehicle at the end of the lease",
                            IsDefault = false,
                            IsPercentage = false,
                            IsRequired = false,
                            Name = "Purchase Option",
                            Price = 79200.00m,
                            Type = "PurchaseOption"
                        },
                        new
                        {
                            Id = 8,
                            TrimId = "35-tfsi-business-extended",
                            ModelId = "a3-berline",
                            BrandId = "audi",
                            Description = "Complete insurance coverage with 0% deductible",
                            IsDefault = true,
                            IsPercentage = true,
                            IsRequired = false,
                            Name = "Full Insurance 0%",
                            Price = 27.92m,
                            Type = "FullInsurance0Percent"
                        },
                        new
                        {
                            Id = 9,
                            TrimId = "35-tfsi-business-extended",
                            ModelId = "a3-berline",
                            BrandId = "audi",
                            Description = "Complete insurance coverage with 4% deductible",
                            IsDefault = false,
                            IsPercentage = true,
                            IsRequired = false,
                            Name = "Full Insurance 4%",
                            Price = 20.94m,
                            Type = "FullInsurance4Percent"
                        },
                        new
                        {
                            Id = 10,
                            TrimId = "35-tfsi-business-extended",
                            ModelId = "a3-berline",
                            BrandId = "audi",
                            Description = "24/7 roadside assistance service",
                            IsDefault = true,
                            IsPercentage = false,
                            IsRequired = false,
                            Name = "Road Assistance",
                            Price = 15.99m,
                            Type = "RoadAssistance"
                        },
                        new
                        {
                            Id = 11,
                            TrimId = "35-tfsi-business-extended",
                            ModelId = "a3-berline",
                            BrandId = "audi",
                            Description = "Regular maintenance service including oil changes and inspections",
                            IsDefault = true,
                            IsPercentage = false,
                            IsRequired = false,
                            Name = "Maintenance Package",
                            Price = 49.99m,
                            Type = "MaintenancePackage"
                        },
                        new
                        {
                            Id = 12,
                            TrimId = "35-tfsi-business-extended",
                            ModelId = "a3-berline",
                            BrandId = "audi",
                            Description = "Road tax vignettes for European countries",
                            IsDefault = false,
                            IsPercentage = false,
                            IsRequired = false,
                            Name = "Vignettes",
                            Price = 29.99m,
                            Type = "Vignettes"
                        },
                        new
                        {
                            Id = 13,
                            TrimId = "35-tfsi-business-extended",
                            ModelId = "a3-berline",
                            BrandId = "audi",
                            Description = "GPS tracking system for your vehicle",
                            IsDefault = false,
                            IsPercentage = false,
                            IsRequired = false,
                            Name = "Geolocalisation",
                            Price = 19.90m,
                            Type = "Geolocalisation"
                        },
                        new
                        {
                            Id = 14,
                            TrimId = "35-tfsi-business-extended",
                            ModelId = "a3-berline",
                            BrandId = "audi",
                            Description = "Option to purchase the vehicle at the end of the lease",
                            IsDefault = false,
                            IsPercentage = false,
                            IsRequired = false,
                            Name = "Purchase Option",
                            Price = 58000.00m,
                            Type = "PurchaseOption"
                        });
                });

            modelBuilder.Entity("ConfiguratorAPI.Models.Brand", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("logo");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("brands", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "alfaromeo",
                            IsActive = true,
                            Logo = "/brands/alfaromeo.webp",
                            Name = "Alfa Romeo"
                        },
                        new
                        {
                            Id = "audi",
                            IsActive = true,
                            Logo = "/brands/audi.webp",
                            Name = "Audi"
                        },
                        new
                        {
                            Id = "bmw",
                            IsActive = true,
                            Logo = "/brands/bmw.webp",
                            Name = "BMW"
                        },
                        new
                        {
                            Id = "mercedes",
                            IsActive = true,
                            Logo = "/brands/mercedes.webp",
                            Name = "Mercedes"
                        });
                });

            modelBuilder.Entity("ConfiguratorAPI.Models.FeatureGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("TrimId")
                        .HasColumnType("text")
                        .HasColumnName("trim_id");

                    b.Property<string>("ModelId")
                        .HasColumnType("text")
                        .HasColumnName("model_id");

                    b.Property<string>("BrandId")
                        .HasColumnType("text")
                        .HasColumnName("brand_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id", "TrimId", "ModelId", "BrandId");

                    b.HasIndex("TrimId", "ModelId", "BrandId");

                    b.ToTable("feature_groups", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TrimId = "2.0-turbo-super-bva",
                            ModelId = "giulia",
                            BrandId = "alfaromeo",
                            Name = "Caractéristiques"
                        },
                        new
                        {
                            Id = 2,
                            TrimId = "2.0-turbo-super-bva",
                            ModelId = "giulia",
                            BrandId = "alfaromeo",
                            Name = "Transmission"
                        },
                        new
                        {
                            Id = 3,
                            TrimId = "2.0-turbo-super-bva",
                            ModelId = "giulia",
                            BrandId = "alfaromeo",
                            Name = "Performances"
                        },
                        new
                        {
                            Id = 4,
                            TrimId = "35-tfsi-business-extended",
                            ModelId = "a3-berline",
                            BrandId = "audi",
                            Name = "Caractéristiques"
                        },
                        new
                        {
                            Id = 5,
                            TrimId = "35-tfsi-business-extended",
                            ModelId = "a3-berline",
                            BrandId = "audi",
                            Name = "Transmission"
                        },
                        new
                        {
                            Id = 6,
                            TrimId = "35-tfsi-business-extended",
                            ModelId = "a3-berline",
                            BrandId = "audi",
                            Name = "Performances"
                        });
                });

            modelBuilder.Entity("ConfiguratorAPI.Models.Model", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("BrandId")
                        .HasColumnType("text")
                        .HasColumnName("brand_id");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id", "BrandId");

                    b.HasIndex("BrandId");

                    b.ToTable("models", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "giulia",
                            BrandId = "alfaromeo",
                            Image = "/models/alfaromeo/giulia.webp",
                            IsActive = true,
                            Name = "Giulia"
                        },
                        new
                        {
                            Id = "stelvio",
                            BrandId = "alfaromeo",
                            Image = "/models/alfaromeo/stelvio.webp",
                            IsActive = true,
                            Name = "Stelvio"
                        },
                        new
                        {
                            Id = "a3-berline",
                            BrandId = "audi",
                            Image = "/models/audi/a3-berline.webp",
                            IsActive = true,
                            Name = "A3 Berline"
                        },
                        new
                        {
                            Id = "q2",
                            BrandId = "audi",
                            Image = "/models/audi/q2.webp",
                            IsActive = true,
                            Name = "Q2"
                        },
                        new
                        {
                            Id = "q3",
                            BrandId = "audi",
                            Image = "/models/audi/q3.webp",
                            IsActive = true,
                            Name = "Q3"
                        },
                        new
                        {
                            Id = "q3-sportback",
                            BrandId = "audi",
                            Image = "/models/audi/q3-sportback.webp",
                            IsActive = true,
                            Name = "Q3 Sportback"
                        },
                        new
                        {
                            Id = "q8-e-tron",
                            BrandId = "audi",
                            Image = "/models/audi/q8-e-tron.webp",
                            IsActive = true,
                            Name = "Q8 e-tron"
                        },
                        new
                        {
                            Id = "q8-sportback-e-tron",
                            BrandId = "audi",
                            Image = "/models/audi/q8-sportback-e-tron.webp",
                            IsActive = true,
                            Name = "Q8 Sportback e-tron"
                        },
                        new
                        {
                            Id = "e-tron-gt",
                            BrandId = "audi",
                            Image = "/models/audi/e-tron-gt.webp",
                            IsActive = true,
                            Name = "e-tron GT"
                        },
                        new
                        {
                            Id = "q7",
                            BrandId = "audi",
                            Image = "/models/audi/q7.webp",
                            IsActive = true,
                            Name = "Q7"
                        },
                        new
                        {
                            Id = "q8",
                            BrandId = "audi",
                            Image = "/models/audi/q8.webp",
                            IsActive = true,
                            Name = "Q8"
                        },
                        new
                        {
                            Id = "3-series",
                            BrandId = "bmw",
                            Image = "/models/bmw/3-series.webp",
                            IsActive = true,
                            Name = "3 Series"
                        },
                        new
                        {
                            Id = "5-series",
                            BrandId = "bmw",
                            Image = "/models/bmw/5-series.webp",
                            IsActive = true,
                            Name = "5 Series"
                        },
                        new
                        {
                            Id = "x3",
                            BrandId = "bmw",
                            Image = "/models/bmw/x3.webp",
                            IsActive = true,
                            Name = "X3"
                        },
                        new
                        {
                            Id = "x5",
                            BrandId = "bmw",
                            Image = "/models/bmw/x5.webp",
                            IsActive = true,
                            Name = "X5"
                        },
                        new
                        {
                            Id = "a-class",
                            BrandId = "mercedes",
                            Image = "/models/mercedes/a-class.webp",
                            IsActive = true,
                            Name = "A-Class"
                        },
                        new
                        {
                            Id = "c-class",
                            BrandId = "mercedes",
                            Image = "/models/mercedes/c-class.webp",
                            IsActive = true,
                            Name = "C-Class"
                        },
                        new
                        {
                            Id = "e-class",
                            BrandId = "mercedes",
                            Image = "/models/mercedes/e-class.webp",
                            IsActive = true,
                            Name = "E-Class"
                        },
                        new
                        {
                            Id = "glc",
                            BrandId = "mercedes",
                            Image = "/models/mercedes/glc.webp",
                            IsActive = true,
                            Name = "GLC"
                        });
                });

            modelBuilder.Entity("ConfiguratorAPI.Models.PriceMatrix", b =>
                {
                    b.Property<string>("TrimId")
                        .HasColumnType("text")
                        .HasColumnName("trim_id");

                    b.Property<string>("ModelId")
                        .HasColumnType("text")
                        .HasColumnName("model_id");

                    b.Property<string>("BrandId")
                        .HasColumnType("text")
                        .HasColumnName("brand_id");

                    b.HasKey("TrimId", "ModelId", "BrandId");

                    b.ToTable("price_matrices", (string)null);
                });

            modelBuilder.Entity("ConfiguratorAPI.Models.PricePoint", b =>
                {
                    b.Property<string>("TrimId")
                        .HasColumnType("text")
                        .HasColumnName("trim_id");

                    b.Property<string>("ModelId")
                        .HasColumnType("text")
                        .HasColumnName("model_id");

                    b.Property<string>("BrandId")
                        .HasColumnType("text")
                        .HasColumnName("brand_id");

                    b.Property<int>("Duration")
                        .HasColumnType("integer")
                        .HasColumnName("duration");

                    b.Property<int>("Kilometers")
                        .HasColumnType("integer")
                        .HasColumnName("kilometers");

                    b.HasKey("TrimId", "ModelId", "BrandId", "Duration", "Kilometers");

                    b.ToTable("price_points", (string)null);
                });

            modelBuilder.Entity("ConfiguratorAPI.Models.Trim", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ModelId")
                        .HasColumnType("text")
                        .HasColumnName("model_id");

                    b.Property<string>("BrandId")
                        .HasColumnType("text")
                        .HasColumnName("brand_id");

                    b.Property<List<string>>("Features")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("features");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<decimal>("ListPrice")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("list_price");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("price");

                    b.HasKey("Id", "ModelId", "BrandId");

                    b.HasIndex("ModelId", "BrandId");

                    b.ToTable("trims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2.0-turbo-super-bva",
                            ModelId = "giulia",
                            BrandId = "alfaromeo",
                            Features = new List<string> { "2.0L Turbo Engine", "8-Speed Automatic Transmission", "Rear-Wheel Drive", "Leather Interior", "Dual-Zone Climate Control", "Infotainment System with Navigation", "Parking Sensors", "Cruise Control" },
                            IsActive = true,
                            ListPrice = 198000m,
                            Name = "2.0 Turbo Super BVA",
                            Price = 449m
                        },
                        new
                        {
                            Id = "35-tfsi-business-extended",
                            ModelId = "a3-berline",
                            BrandId = "audi",
                            Features = new List<string> { "1.5L TFSI Engine", "150 ch", "Manual 6-Speed Transmission", "Front-Wheel Drive", "MMI Navigation System", "Audi Virtual Cockpit", "Dual-Zone Climate Control", "Parking Sensors" },
                            IsActive = true,
                            ListPrice = 145000m,
                            Name = "35 TFSI Business Extended",
                            Price = 349m
                        },
                        new
                        {
                            Id = "35-tfsi-s-line-bva",
                            ModelId = "q2",
                            BrandId = "audi",
                            Features = new List<string> { "1.5L TFSI Engine", "150 ch", "Automatic 7-Speed Transmission", "Front-Wheel Drive", "S Line Package", "MMI Navigation System", "Audi Virtual Cockpit", "LED Headlights" },
                            IsActive = true,
                            ListPrice = 155000m,
                            Name = "35 TFSI S Line BVA",
                            Price = 399m
                        });
                });

            modelBuilder.Entity("ConfiguratorAPI.Models.TrimFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FeatureGroupId")
                        .HasColumnType("integer")
                        .HasColumnName("feature_group_id");

                    b.Property<string>("TrimId")
                        .HasColumnType("text")
                        .HasColumnName("trim_id");

                    b.Property<string>("ModelId")
                        .HasColumnType("text")
                        .HasColumnName("model_id");

                    b.Property<string>("BrandId")
                        .HasColumnType("text")
                        .HasColumnName("brand_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id", "FeatureGroupId", "TrimId", "ModelId", "BrandId");

                    b.HasIndex("FeatureGroupId", "TrimId", "ModelId", "BrandId");

                    b.ToTable("trim_features", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FeatureGroupId = 1,
                            TrimId = "2.0-turbo-super-bva",
                            ModelId = "giulia",
                            BrandId = "alfaromeo",
                            Name = "Moteur",
                            Value = "2.0L Turbo"
                        },
                        new
                        {
                            Id = 2,
                            FeatureGroupId = 1,
                            TrimId = "2.0-turbo-super-bva",
                            ModelId = "giulia",
                            BrandId = "alfaromeo",
                            Name = "Puissance",
                            Value = "200 ch"
                        },
                        new
                        {
                            Id = 3,
                            FeatureGroupId = 1,
                            TrimId = "2.0-turbo-super-bva",
                            ModelId = "giulia",
                            BrandId = "alfaromeo",
                            Name = "Couple",
                            Value = "330 Nm"
                        },
                        new
                        {
                            Id = 4,
                            FeatureGroupId = 1,
                            TrimId = "2.0-turbo-super-bva",
                            ModelId = "giulia",
                            BrandId = "alfaromeo",
                            Name = "Cylindrée",
                            Value = "1995 cc"
                        },
                        new
                        {
                            Id = 5,
                            FeatureGroupId = 2,
                            TrimId = "2.0-turbo-super-bva",
                            ModelId = "giulia",
                            BrandId = "alfaromeo",
                            Name = "Boîte de vitesses",
                            Value = "Automatique 8 rapports"
                        },
                        new
                        {
                            Id = 6,
                            FeatureGroupId = 2,
                            TrimId = "2.0-turbo-super-bva",
                            ModelId = "giulia",
                            BrandId = "alfaromeo",
                            Name = "Transmission",
                            Value = "Propulsion arrière"
                        },
                        new
                        {
                            Id = 7,
                            FeatureGroupId = 3,
                            TrimId = "2.0-turbo-super-bva",
                            ModelId = "giulia",
                            BrandId = "alfaromeo",
                            Name = "Vitesse maximale",
                            Value = "235 km/h"
                        },
                        new
                        {
                            Id = 8,
                            FeatureGroupId = 3,
                            TrimId = "2.0-turbo-super-bva",
                            ModelId = "giulia",
                            BrandId = "alfaromeo",
                            Name = "0-100 km/h",
                            Value = "6.6 secondes"
                        },
                        new
                        {
                            Id = 9,
                            FeatureGroupId = 4,
                            TrimId = "35-tfsi-business-extended",
                            ModelId = "a3-berline",
                            BrandId = "audi",
                            Name = "Moteur",
                            Value = "1.5L TFSI"
                        },
                        new
                        {
                            Id = 10,
                            FeatureGroupId = 4,
                            TrimId = "35-tfsi-business-extended",
                            ModelId = "a3-berline",
                            BrandId = "audi",
                            Name = "Puissance",
                            Value = "150 ch"
                        },
                        new
                        {
                            Id = 11,
                            FeatureGroupId = 4,
                            TrimId = "35-tfsi-business-extended",
                            ModelId = "a3-berline",
                            BrandId = "audi",
                            Name = "Couple",
                            Value = "250 Nm"
                        },
                        new
                        {
                            Id = 12,
                            FeatureGroupId = 4,
                            TrimId = "35-tfsi-business-extended",
                            ModelId = "a3-berline",
                            BrandId = "audi",
                            Name = "Cylindrée",
                            Value = "1498 cc"
                        },
                        new
                        {
                            Id = 13,
                            FeatureGroupId = 5,
                            TrimId = "35-tfsi-business-extended",
                            ModelId = "a3-berline",
                            BrandId = "audi",
                            Name = "Boîte de vitesses",
                            Value = "Manuelle 6 rapports"
                        },
                        new
                        {
                            Id = 14,
                            FeatureGroupId = 5,
                            TrimId = "35-tfsi-business-extended",
                            ModelId = "a3-berline",
                            BrandId = "audi",
                            Name = "Transmission",
                            Value = "Traction avant"
                        },
                        new
                        {
                            Id = 15,
                            FeatureGroupId = 6,
                            TrimId = "35-tfsi-business-extended",
                            ModelId = "a3-berline",
                            BrandId = "audi",
                            Name = "Vitesse maximale",
                            Value = "224 km/h"
                        },
                        new
                        {
                            Id = 16,
                            FeatureGroupId = 6,
                            TrimId = "35-tfsi-business-extended",
                            ModelId = "a3-berline",
                            BrandId = "audi",
                            Name = "0-100 km/h",
                            Value = "8.2 secondes"
                        });
                });

            modelBuilder.Entity("ConfiguratorAPI.Models.AdditionalService", b =>
                {
                    b.HasOne("ConfiguratorAPI.Models.Trim", null)
                        .WithMany()
                        .HasForeignKey("TrimId", "ModelId", "BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConfiguratorAPI.Models.FeatureGroup", b =>
                {
                    b.HasOne("ConfiguratorAPI.Models.Trim", null)
                        .WithMany()
                        .HasForeignKey("TrimId", "ModelId", "BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConfiguratorAPI.Models.Model", b =>
                {
                    b.HasOne("ConfiguratorAPI.Models.Brand", null)
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConfiguratorAPI.Models.PriceMatrix", b =>
                {
                    b.HasOne("ConfiguratorAPI.Models.Trim", null)
                        .WithOne()
                        .HasForeignKey("ConfiguratorAPI.Models.PriceMatrix", "TrimId", "ModelId", "BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConfiguratorAPI.Models.PricePoint", b =>
                {
                    b.HasOne("ConfiguratorAPI.Models.PriceMatrix", null)
                        .WithMany("Points")
                        .HasForeignKey("TrimId", "ModelId", "BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("ConfiguratorAPI.Models.AdvancePaymentPrices", "Prices", b1 =>
                        {
                            b1.Property<string>("PricePointTrimId")
                                .HasColumnType("text");

                            b1.Property<string>("PricePointModelId")
                                .HasColumnType("text");

                            b1.Property<string>("PricePointBrandId")
                                .HasColumnType("text");

                            b1.Property<int>("PricePointDuration")
                                .HasColumnType("integer");

                            b1.Property<int>("PricePointKilometers")
                                .HasColumnType("integer");

                            b1.Property<decimal>("Advance0")
                                .HasColumnType("decimal(10,2)")
                                .HasColumnName("advance_0");

                            b1.Property<decimal>("Advance10")
                                .HasColumnType("decimal(10,2)")
                                .HasColumnName("advance_10");

                            b1.Property<decimal>("Advance20")
                                .HasColumnType("decimal(10,2)")
                                .HasColumnName("advance_20");

                            b1.Property<decimal>("Advance30")
                                .HasColumnType("decimal(10,2)")
                                .HasColumnName("advance_30");

                            b1.HasKey("PricePointTrimId", "PricePointModelId", "PricePointBrandId", "PricePointDuration", "PricePointKilometers");

                            b1.ToTable("price_points");

                            b1.WithOwner()
                                .HasForeignKey("PricePointTrimId", "PricePointModelId", "PricePointBrandId", "PricePointDuration", "PricePointKilometers");
                        });

                    b.Navigation("Prices")
                        .IsRequired();
                });

            modelBuilder.Entity("ConfiguratorAPI.Models.Trim", b =>
                {
                    b.HasOne("ConfiguratorAPI.Models.Model", null)
                        .WithMany()
                        .HasForeignKey("ModelId", "BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConfiguratorAPI.Models.TrimFeature", b =>
                {
                    b.HasOne("ConfiguratorAPI.Models.FeatureGroup", null)
                        .WithMany("Features")
                        .HasForeignKey("FeatureGroupId", "TrimId", "ModelId", "BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConfiguratorAPI.Models.FeatureGroup", b =>
                {
                    b.Navigation("Features");
                });

            modelBuilder.Entity("ConfiguratorAPI.Models.PriceMatrix", b =>
                {
                    b.Navigation("Points");
                });
#pragma warning restore 612, 618
        }
    }
}
